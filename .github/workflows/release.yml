name: Release Management

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$ ]]; then
          echo "Error: Version must be in format v1.2.3 or v1.2.3-beta"
          exit 1
        fi
        
    - name: Update Cargo.toml version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        # Remove 'v' prefix for Cargo.toml
        CARGO_VERSION="${VERSION#v}"
        
        # Update version in Cargo.toml
        sed -i "s/^version = \".*\"/version = \"$CARGO_VERSION\"/" Cargo.toml
        
        echo "Updated Cargo.toml version to: $CARGO_VERSION"
        
    - name: Update debian/changelog
      run: |
        VERSION="${{ github.event.inputs.version }}"
        CARGO_VERSION="${VERSION#v}"
        DATE=$(date -R)  # RFC 2822 format required by Debian
        
        # Create new changelog entry
        {
          echo "ddns-updater ($CARGO_VERSION-1) unstable; urgency=medium"
          echo ""
          echo "  * Release $VERSION"
          echo "  * Automated release build"
          echo ""
          echo " -- GitHub Actions <action@github.com>  $DATE"
          echo ""
        } > debian/changelog.new
        
        # Append old changelog
        if [ -f debian/changelog ]; then
          cat debian/changelog >> debian/changelog.new
        fi
        
        mv debian/changelog.new debian/changelog
        
        echo "Updated debian/changelog for version: $CARGO_VERSION-1"
        
    - name: Run tests before release
      run: |
        # Install Rust
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
        
        # Run comprehensive tests to make sure everything works
        cargo test --verbose
        cargo check --verbose
        
        # Run full test suite including CLI integration tests
        chmod +x scripts/test_all.sh
        ./scripts/test_all.sh
        
    - name: Commit version updates
      run: |
        git add Cargo.toml debian/changelog Cargo.lock
        git commit -m "chore: bump version to ${{ github.event.inputs.version }}" || echo "No changes to commit"
        
    - name: Create and push tag
      run: |
        git tag -a "${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"
        git push origin "${{ github.event.inputs.version }}"
        git push origin main
        
    - name: Create GitHub Release (Initial)
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
        draft: true  # Create as draft first
        body: |
          ## DDNS Updater ${{ github.event.inputs.version }}
          
          This is an automated release created from the Release Management workflow.
          
          ### What's Changed
          - See the full changelog below for detailed changes
          
          ### Downloads
          Assets are being built and will be attached automatically...  
          - Debian packages for AMD64 and ARM64 architectures
          
          ### Installation
          
          #### Using Debian Package (Recommended)
          
          **For x86_64/AMD64 systems:**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/ddns-updater_*_amd64.deb
          sudo apt install ./ddns-updater_*_amd64.deb
          ```
          
          **For ARM64/aarch64 systems:**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/ddns-updater_*_arm64.deb
          sudo apt install ./ddns-updater_*_arm64.deb
          ```
          
          ### Configuration
          After installation, run the setup script:
          ```bash
          sudo /usr/share/ddns-updater/install-systemd.sh
          ```
          
          See the [documentation](https://github.com/${{ github.repository }}) for detailed configuration instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-attach-assets:
    name: Build and Attach Release Assets
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            target: x86_64-unknown-linux-gnu
          - arch: arm64
            target: aarch64-unknown-linux-gnu
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.version }}  # Check out the tagged version

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@1.82.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-release-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cross-compilation dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          debhelper \
          fakeroot \
          devscripts \
          gcc-aarch64-linux-gnu \
          binutils-aarch64-linux-gnu
        
        # Install cargo cross for cross-compilation with Rust 1.82.0 compatibility
        rustc --version
        cargo --version
        cargo install cross --git https://github.com/cross-rs/cross --force
          
    - name: Build Debian package
      run: |
        chmod +x build-deb.sh
        ./build-deb.sh
      env:
        CARGO_TARGET: ${{ matrix.target }}
        USE_CROSS: ${{ matrix.arch == 'arm64' && 'true' || 'false' }}
        DEB_HOST_ARCH: ${{ matrix.arch }}
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Find and copy .deb files
        if ls ../ddns-updater_*.deb 1> /dev/null 2>&1; then
          echo "=== Found Debian packages for ${{ matrix.arch }} ==="
          cp ../ddns-updater_*.deb release-assets/
          ls -la release-assets/
          
          # Rename to include architecture for clarity
          cd release-assets
          for file in *.deb; do
            if [[ ! "$file" =~ _${{ matrix.arch }}\.deb$ ]]; then
              mv "$file" "${file%.deb}_${{ matrix.arch }}.deb"
            fi
          done
          ls -la
        else
          echo "No .deb files found for ${{ matrix.arch }}!"
          exit 1
        fi
        
    - name: Upload assets to release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version }}
        files: release-assets/*
        draft: false  # Publish the release
        body: |
          ## DDNS Updater ${{ github.event.inputs.version }}
          
          ### What's Changed
          - Updated to version ${{ github.event.inputs.version }}
          - See full changelog for detailed changes
          
          ### Installation
          
          #### Using Debian Package
          
          **For x86_64/AMD64 systems:**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/ddns-updater_*_amd64.deb
          sudo dpkg -i ddns-updater_*_amd64.deb
          ```
          
          **For ARM64/aarch64 systems:**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version }}/ddns-updater_*_arm64.deb
          sudo dpkg -i ddns-updater_*_arm64.deb
          ```
          
          ### Configuration
          After installation, run the setup script:
          ```bash
          sudo /usr/share/ddns-updater/install-systemd.sh
          ```
          
          ### Usage
          ```bash
          # Basic usage
          ddns_updater --host your-domain.com --config /path/to/nginx.conf
          
          # With systemd (after package installation)
          sudo systemctl enable ddns-updater.timer
          sudo systemctl start ddns-updater.timer
          ```
          
          See the [documentation](https://github.com/${{ github.repository }}) for detailed configuration instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}